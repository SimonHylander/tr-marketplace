import { GetStaticProps, type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";

import { api } from "y/utils/api";
import { generateSSGHelper } from "y/utils/ssg";

import { format } from "date-fns";
import { sv } from "date-fns/locale";

import { Clock, MapPin } from "lucide-react";
import { useEffect, useState } from "react";

import { motion, AnimatePresence } from "framer-motion";
import { wrap } from "popmotion";

export const getStaticProps: GetStaticProps = async (context) => {
  const ssg = generateSSGHelper();
  const id = context.params?.id;

  if (typeof id !== "string") {
    return {
      redirect: {
        destination: "/ads",
      },
      props: {},
    };
  }

  await ssg.ad.get.prefetch({ id });

  return {
    props: {
      trpcState: ssg.dehydrate(),
      id,
    },
  };
};

export const getStaticPaths = () => {
  return {
    paths: [],
    fallback: "blocking",
  };
};

const AdDetails: NextPage<{ id: string }> = ({ id }) => {
  const utils = api.useContext();

  const [selectedImage, setSelectedImage] = useState<string>("/tod10n.png");

  const [images] = useState<string[]>([
    "/tod10n.png",
    "/tod10n2.jpg",
    "/tod10n3.jpg",
    "/tod10n4.jpg",
  ]);

  const { data: ad } = api.ad.get.useQuery(
    { id },
    {
      refetchOnWindowFocus: false,
    }
  );

  const { mutate: buyTreddyNoShipping } =
    api.ad.buyTreddyNoShipping.useMutation({
      onSuccess: () => {
        utils.ad.list.invalidate();
      },
    });

  const buyAsNoShipping = () => {
    if (!ad || !ad.treddy_deal_id) return;
    buyTreddyNoShipping({ treddyDealId: ad?.treddy_deal_id });
  };

  return (
    <>
      <Head>
        <title>Treddy Marketplace</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon-196x196.png" />
      </Head>

      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#155d64] to-[#79bb97]">
        <div className="container flex flex-col items-center justify-center gap-12">
          <h1 className="mb-12 text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Treddy <span className="text-[#79bb97]">Marketplace</span>
          </h1>

          {ad && (
            <div className="flex gap-12">
              <div className="flex flex-col rounded bg-[#f5f5f5]">
                <div className="relative flex">
                  <div className="relative flex max-w-xl items-center overflow-hidden rounded-tl rounded-tr">
                    <Gallery selectedImage={selectedImage} images={images} />
                  </div>

                  <div className="flex flex-col rounded-bl rounded-br p-4">
                    <h2 className="text-4xl font-bold">{ad.name}</h2>
                    <p className="text-2xl text-teal-500">{ad.price}:-</p>

                    <p className="flex gap-1 py-2 text-xs">
                      <span className="text-gray-500">Säljare:</span>
                      <span className="text-[#155d64] hover:cursor-pointer hover:text-[#79bb97]">
                        SimonHylander
                      </span>
                    </p>

                    <div className="flex gap-4">
                      <p className="flex items-center gap-1 py-2 text-xs text-gray-500">
                        <Clock color="#6b7280" size={14} />
                        <span>
                          {format(ad.createdAt, "dd LLLL, hh:24", {
                            locale: sv,
                          })}
                        </span>
                      </p>

                      <p className="flex items-center gap-1 py-2 text-xs text-gray-500">
                        <MapPin color="#6b7280" size={14} />
                        <span>Stockholm</span>
                      </p>
                    </div>

                    <p className="max-w-md py-2 text-sm">{ad.description}</p>

                    <div className="mb-1 text-xs text-gray-500">
                      Köp med Treddy
                    </div>
                    <div className="text-gray flex gap-4 rounded">
                      <button
                        type="button"
                        className="flex items-center gap-2 rounded bg-[#155d64] p-2 font-semibold text-white hover:bg-[#79bb97]"
                      >
                        <Image
                          src="/tr.svg"
                          alt=""
                          className="cursor-pointer rounded-tl rounded-tr text-white"
                          width={32}
                          height={32}
                        />
                        Säker betalning och frakt
                      </button>

                      <button
                        type="button"
                        className="flex items-center gap-2 rounded bg-[#155d64] p-2 font-semibold text-white hover:bg-[#79bb97]"
                        onClick={buyAsNoShipping}
                      >
                        <Image
                          src="/tr.svg"
                          alt=""
                          className="cursor-pointer rounded-tl rounded-tr text-white"
                          width={32}
                          height={32}
                        />
                        Säker betalning
                      </button>
                    </div>
                  </div>
                </div>

                <div className="flex max-w-[22rem] gap-4 overflow-hidden rounded-tl rounded-tr p-4">
                  {images.map((image, i) => (
                    <Image
                      key={i}
                      src={image}
                      alt=""
                      className={`cursor-pointer rounded-tl rounded-tr ${
                        selectedImage === image ? "opacity-100" : "opacity-50"
                      }  hover:opacity-100`}
                      width={100}
                      height={100}
                      onClick={() => setSelectedImage(image)}
                    />
                  ))}
                </div>
              </div>
            </div>
          )}
        </div>
      </main>
    </>
  );
};

export default AdDetails;

const variants = {
  enter: (direction: number) => {
    return {
      x: direction > 0 ? 1000 : -1000,
      opacity: 0,
    };
  },
  center: {
    zIndex: 1,
    x: 0,
    opacity: 1,
  },
  exit: (direction: number) => {
    return {
      zIndex: 0,
      x: direction < 0 ? 1000 : -1000,
      opacity: 0,
    };
  },
};

/**
 * Experimenting with distilling swipe offset and velocity into a single variable, so the
 * less distance a user has swiped, the more velocity they need to register as a swipe.
 * Should accomodate longer swipes and short flicks without having binary checks on
 * just distance thresholds and velocity > 0.
 */
const swipeConfidenceThreshold = 10000;
const swipePower = (offset: number, velocity: number) => {
  return Math.abs(offset) * velocity;
};

const Gallery = ({
  selectedImage,
  images,
}: {
  selectedImage: string;
  images: string[];
}) => {
  const [[page, direction], setPage] = useState([0, 0]);

  // We only have 3 images, but we paginate them absolutely (ie 1, 2, 3, 4, 5...) and
  // then wrap that within 0-2 to find our image ID in the array below. By passing an
  // absolute page index as the `motion` component's `key` prop, `AnimatePresence` will
  // detect it as an entirely new image. So you can infinitely paginate as few as 1 images.
  const imageIndex = wrap(0, images.length, page);

  const paginate = (newDirection: number) => {
    setPage([page + newDirection, newDirection]);
  };

  useEffect(() => {
    console.log(selectedImage);
    console.log(page);
    console.log(images.indexOf(selectedImage));
    const i = images.indexOf(selectedImage);
    setPage([page + i, i]);
  }, [selectedImage]);

  return (
    <>
      <AnimatePresence initial={false} custom={direction}>
        <motion.img
          className="max-w-[600px] rounded-tl rounded-tr"
          key={page}
          src={images[imageIndex]}
          custom={direction}
          variants={variants}
          initial="enter"
          animate="center"
          exit="exit"
          transition={{
            x: { type: "spring", stiffness: 300, damping: 30 },
            opacity: { duration: 0.2 },
          }}
          drag="x"
          dragConstraints={{ left: 0, right: 0 }}
          dragElastic={1}
          onDragEnd={(e, { offset, velocity }) => {
            const swipe = swipePower(offset.x, velocity.x);

            if (swipe < -swipeConfidenceThreshold) {
              paginate(1);
            } else if (swipe > swipeConfidenceThreshold) {
              paginate(-1);
            }
          }}
        />
      </AnimatePresence>
    </>
  );
};
